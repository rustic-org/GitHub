name: Print Changed Files

on:
  push:
    branches:
      - main

jobs:
  print_changed_files:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: ${{ github.event_name == 'pull_request' && 2 || 0 }}
      - name: Get commit sha
        id: get-commit
        run: |
          from_commit="${{ github.event.before }}"
          to_commit="${{ github.event.after }}"
          commits_on_head="$(git rev-list HEAD)"
          backup_flag=false
          if [[ $commits_on_head =~ (^|[[:space:]])$from_commit($|[[:space:]]) ]] && \
             [[ $commits_on_head =~ (^|[[:space:]])$to_commit($|[[:space:]]) ]]
          then
              echo "Setting backup flag to true"
              backup_flag=true
          else
              echo "Either before commit [$from_commit] or after commit [$to_commit] is missing in HEAD"
              echo "Skipping backup"
          fi
          echo "backup_flag=$backup_flag" >> $GITHUB_ENV
      - name: Get changed files
        id: changed-files
        if: env.backup_flag == 'true'
        run: |
          if ${{ github.event_name == 'pull_request' }}; then
              git diff --name-status -r HEAD^1 HEAD > changed_files.txt
          else
              from_commit="${{ github.event.before }}"
              to_commit="${{ github.event.after }}"
              git diff --name-status "$from_commit" "$to_commit" > changed_files.txt
          fi
          echo "changed_files=changed_files.txt" >> $GITHUB_ENV
      - name: List changed files with actions
        if: env.backup_flag == 'true'
        run: |
          while read -r line; do
              action=$(echo $line | cut -d' ' -f1)
              file=$(echo $line | cut -d' ' -f2-)
              case $action in
                  A) echo "$file was added";;
                  M) echo "$file was modified";;
                  D) echo "$file was deleted";;
                  R) old_file=$(echo $file | cut -d$'\t' -f1)
                     new_file=$(echo $file | cut -d$'\t' -f2)
                     echo "$old_file was renamed to $new_file";;
                  R100) old_file=$(echo $file | cut -d$'\t' -f1)
                     new_file=$(echo $file | cut -d$'\t' -f2)
                     echo "$old_file was renamed/moved to $new_file";;
                  C) new_file=$(echo $file | cut -d$'\t' -f2)
                     echo "$new_file was copied";;
                  *) echo "Unknown action for file: $file";;
              esac
          done < ${{ env.changed_files }}
