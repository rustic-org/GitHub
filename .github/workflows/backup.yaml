name: Backup Source Control

on:
  push:
    branches:
      - main

jobs:
  backup_source_control:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: ${{ github.event_name == 'pull_request' && 2 || 0 }}
      - id: get-commit
        run: |
          from_commit="${{ github.event.before }}"
          to_commit="${{ github.event.after }}"
          commits_on_head="$(git rev-list HEAD)"
          backup_flag=false
          if [[ $commits_on_head =~ (^|[[:space:]])$from_commit($|[[:space:]]) ]] && \
             [[ $commits_on_head =~ (^|[[:space:]])$to_commit($|[[:space:]]) ]]
          then
              echo "Setting backup flag to true"
              backup_flag=true
          else
              echo "Either before commit [$from_commit] or after commit [$to_commit] is missing in HEAD"
              echo "Skipping backup"
          fi
          echo "backup_flag=$backup_flag" >> $GITHUB_ENV
      - if: env.backup_flag == 'true'
        run: |
          cat << 'EOF' > script.py
          import requests
          from pprint import pprint
          with open('changed_files.txt') as file:
              changed = file.readlines()
          payload = {"create": {}, "modify": {}, "remove": []}
          for change in changed:
              parts = change.strip().split()
              action = parts[0]
              if action in ("A", "M"):
                  assert len(parts) == 2, "Invalid Entry"
                  filepath = parts[1]
                  with open(filepath) as f:
                      payload["create"][filepath] = f.read()
              elif action in ("R", "R100"):
                  assert len(parts) == 3, "Invalid Entry"
                  payload["modify"][parts[1]] = parts[2]
              else:
                  assert len(parts) == 2, "Invalid Entry"
                  payload["remove"].append(parts[1])
          response = requests.post(url="${{ secrets.backup_url }}/backup",
                                   headers={"authorization": "Bearer ${{ secrets.backup_token }}",
                                            "content-location": "$github.repository"},
                                   json=payload)
          response.raise_for_status()
          EOF
      - id: changed-files
        if: env.backup_flag == 'true'
        run: |
          if ${{ github.event_name == 'pull_request' }}; then
              git diff --name-status -r HEAD^1 HEAD > changed_files.txt
          else
              from_commit="${{ github.event.before }}"
              to_commit="${{ github.event.after }}"
              git diff --name-status "$from_commit" "$to_commit" > changed_files.txt
          fi
          echo "changed_files=changed_files.txt" >> $GITHUB_ENV
      - if: env.backup_flag == 'true'
        run: |
          python script.py
